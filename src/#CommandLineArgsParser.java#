
public class CommandLineArgsParser 
{
 String pattern;
 String[] args;
 public CommandLineArgsParser(String pattern, String[] args)
 {   
	 this.pattern = pattern;
	 this.args = args;
	}
    
	public void validateCommandAgainsePattern()
	{
	 if(!validCommandLineArgs(pattern, args))
	 {
	  DAMPrototype.printErrorAndExit("incorrect command line");
	 }
	}
    
	private boolean validCommandLineArgs(String pattern, String[] args)
	{
	 boolean validArgs = true;
	 String[] splittedPattern = pattern.split(" ");
	 if(splittedPattern.length != args.length)
	 {
	  validArgs = false;
	 }
	 else
	 {
	  for(int argCounter = 0; argCounter<args.length; argCounter++)
	  {
	   String currentArg = args[argCounter];
	   String patternArg = splittedPattern[argCounter];
	   if(patternArg.charAt(0) == '-')
	   {
	    if(!currentArg.equals(patternArg))
	    {
	     validArgs = false;
	     break;
	    }
	   }
	  }
	 }
	 return validArgs;
	}
}
